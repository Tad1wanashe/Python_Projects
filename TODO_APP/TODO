import os #for clsing the console
from os import system
from time import sleep # to pause the program

todo_name_done = {} # Dict holding the task name as key and the square as value
#FORMAT
#todo_name_done = {"Task_name": "(▣)", "Task_name": "(☐)"}
# (▣) = completed, (☐) = not completed

completed_tasks = [] #list holding tasks that are completed.
not_completed_tasks = [] #list holding tasks that aren't completed
no_tasks = False # for conditionals. To determine if dict is empty or not

def view_tasks(): # function holding code to output the user's task 

        print("Total number of tasks: " + str(len(todo_name_done)))

        print ("Number of uncompleted tasks: " + str(len(not_completed_tasks)))

        print("Number of completed tasks: " + str(len(completed_tasks)))

        print ("\n=== Your Tasks ===\n")

        # for loop to output each task
        # enumerate numbers each item it loops through
        for n, i in enumerate(todo_name_done):

            if todo_name_done[i] == "(▣)":

# outputs the number, the value of the key (empty or full square), and then the name of the task
                print(str(n+1)+ ")" + todo_name_done[i] + "  " + i)

            elif todo_name_done[i] == "(☐)":

              print(str(n+1) + ") " + todo_name_done[i]+ "  " + i)

        print("\n")

def new_task():

    print("=== New Task ===")

    while True: # loop to continue as long as user enters invalid name for task

        #asks user what the name of the new task should be.
        new_task_name = input("New task? Let's add a name\n¬")

        #checks if name of task is already used
        if new_task_name in todo_name_done:

            print("Sorry, you already used this task name!")
            pass

        else: # if name of task is really new

            #adds new task to the dict
            todo_name_done[new_task_name] = ("☐")

            print("Creating...")

            sleep(0.4)

            os.system('cls') # clears console

            print("Alrighty, new task created!")

            sleep(1.3)

            not_completed_tasks.append(new_task_name) # adds, or appends that new task to the not_completed_tasks list

            break # BREAKS while true loop and exists to main menu

def delete_tasks():

    print("===Delete Task ===")

    view_tasks() # calls function to view all tasks

    while True:
        #asks user to enter task to delete
        remove_task_name = input("\nTask too difficult? Which task do you want to delete?")

        if remove_task_name in todo_name_done: 

            del todo_name_done[remove_task_name]

            print("Deleting...")
            sleep(0.4)

            os.system('cls')

            print("Bye! Task deleted.")

            sleep(1.3)

        else:

            # alerts user task they enetered doesn't exist
            print("HHm, I can't seem to find that task. Typo?")
            pass 

def edit_task(): # this is to edit/rename tasks

    print("=== Edit Task ===")

    view_tasks()

    while True: 

        task_to_edit = input("\nMade a typo? No Problem! Which task name to edit?\n¬")

        if task_to_edit in todo_name_done:

            break
        else:
            print("Oh no, I can't seem to find that task. Make sure it's the correct name")
            pass

    while True: 
        new_task_name = input("\nChange" + str(task_to_edit) + " to\n¬ ") # new name for the task

        #if user chose to edit their task to a name already used, alerts the user
        if new_task_name in todo_name_done:

                print("Heads up, you already used this task name!")
                pass

        else: # if the task name is new

            print("Editing...")
            sleep(0.4)

            os.system('cls')

            print(str(task_to_edit) + " edited to " + str(new_task_name))

            sleep(1.3)
           #making neww task with different task name and same value
            todo_name_done[new_task_name] = todo_name_done[task_to_edit]

            del todo_name_done[task_to_edit] #deletes old item

            #for loops to update the task to the new task name

            #loops through each item in completed tasks
            for n, i in enumerate(completed_tasks):
                if i == task_to_edit: # if it finds the old name of the task in that list

                    completed_tasks[n] = new_task_name #replaces the old name with the new name
            break

def complete_task(): # code to complete a task

    print("=== Complete Task ===")

    view_tasks() 

    while True:

        if len(todo_name_done) == 0:

                print("You don't have any tasks. Create one!")
                no_tasks = True

                sleep(2)
                break
        else:
                no_tasks = False

        task_to_complete = input("Hurrah! Which task did you complete?\n¬")

        if task_to_complete in todo_name_done:

            break
        else:

                print("You sure thats the correct name? I can't find it.")
                pass
        if no_tasks == False:

            print("Completing...")
            sleep(0.4)

            os.system('cls')

            try:

                todo_name_done[task_to_complete] = "(▣)"

                not_completed_tasks.remove(task_to_complete)

                completed_tasks.append(task_to_complete)

                print(str(task_to_complete) + " completed!\nWelldone!")

                sleep(2)

            except:

                    print("Hey, you already completed this task!")
                    sleep(2)

        else:

                pass
def un_complete_task():

    print("=== Un-Complete Task ===")

    view_tasks() # 

    while True:

        if len(todo_name_done) == 0:

                print("You have 0 tasks. Go back and start one!")
                no_tasks = True
                sleep(2)
                break
        else:

                no_tasks = False
        
        task_to_un_complete = input("Changed your mind? Which task did you not complete?\n¬ ")

        if task_to_un_complete in todo_name_done:

            break
        else:

            print("I can't seem to find that task. Try again!")
            pass

    if no_tasks == False:

        print("Un-Completing..")
        sleep(0.4)
        os.system('cls')

        try:
            # replaces full square with empty square to indicate not completed
            todo_name_done[task_to_un_complete] = "(☐)"
            # removes task from completed list
            completed_tasks.remove(task_to_un_complete)
            #and adds it to not completed list
            not_completed_tasks.append(task_to_un_complete)

            print(str(task_to_un_complete) + " Un-Completed!\nMake sure to complete it!")

            sleep(2)

        except: # if task is already uncompleted

            print("Wait a minute, you already un-completed this task!")
            sleep(2)
    else: 
        pass

def main_menu(): # MAIN MENU WITH DIFFERENT CHOICES

    os.system('cls') # clears console

    view_tasks() # outputs all the user's task

    print("""
        
    (1) New Task
    (2) Delete Task
    (3) Edit Task

    (4) Complete Task
    (5) Un-Complete Task

    """)

    menu_choice = input("¬ ")

    os.system('cls')

    if menu_choice == "1":

            new_task()
    if menu_choice =="2":

            delete_tasks()
    elif menu_choice == "3":

            edit_task()

    elif menu_choice == "4":

            complete_task()

    elif menu_choice == "5":

            un_complete_task

while True: #for the program to go on and on

    main_menu() #calls function to show main menu
        
